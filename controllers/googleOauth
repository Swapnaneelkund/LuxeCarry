const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const User = require("../models/user-model");

passport.use(
    new GoogleStrategy(
        {
            clientID: process.env.GOOGLE_CLIENT_ID,
            clientSecret: process.env.GOOGLE_CLIENT_SECRET,
            callbackURL: "http://localhost:3000/users/auth/google/callback",
        },
        async (accessToken, refreshToken, profile, done) => {
            try {
                // Find user by Google ID
                let user = await User.findOne({ googleId: profile.id });

                if (!user) {
                    // Check if the email already exists
                    const emailExists = await User.findOne({ email: profile.emails[0].value });
                    console.log((emailExists))
                    if (emailExists) {
                        // Update the existing user with the Google ID
                        emailExists.googleId = profile.id;
                        
                        await emailExists.save();
                        return done(null, emailExists);
                    }

                    // Create a new user if no email conflict
                    user = new User({
                        googleId: profile.id,
                        fullname: profile.displayName,
                        email: profile.emails[0].value,
                        picture: profile.photos[0].value,
                    });
                    
                    await user.save();
                }

                return done(null, user);
            } catch (error) {
                console.error("Error in Google Strategy:", error);
                return done(error, null);
            }
        }
    )
);

passport.serializeUser((user, done) => {
    done(null, user.id);
});

passport.deserializeUser(async (id, done) => {
    try {
        const user = await User.findById(id);
        done(null, user);
    } catch (error) {
        done(error, null);
    }
});
